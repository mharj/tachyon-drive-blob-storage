name: Validate and publish package to npmjs
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  # Setting an environment variable with the value of a configuration variable
  PUBLISH_BRANCH: 'refs/heads/main'
  CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  PACKAGE_NAME: 'unknown'
  PACKAGE_VERSION: 'unknown'
  NPM: 'npm'
  NPM_VERSION: 'unknown'
  HAVE_COVERAGE_SCRIPT: false
  HAVE_VALIDATE_SCRIPT: false
  HAVE_LINT_SCRIPT: false
  HAVE_UNIT_TEST_SCRIPT: false
  AZURE_STORAGE_CONNECTION_STRING: 'DefaultEndpointsProtocol=https;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;QueueEndpoint=http://127.0.0.1:10001/devstoreaccount1;TableEndpoint=http://127.0.0.1:10002/devstoreaccount1;'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: dcarbone/install-jq-action@v2
      - uses: actions/checkout@v4

      - name: Identify project environment variables
        run: |
          [ -f pnpm-lock.yaml ] && echo "NPM=pnpm" | tee -a $GITHUB_ENV
          echo "PACKAGE_NAME=$(cat package.json | jq -r .name)" | tee -a $GITHUB_ENV
          echo "PACKAGE_VERSION=$(cat package.json | jq -r .version)" | tee -a $GITHUB_ENV
          echo "HAVE_COVERAGE_SCRIPT=$(jq 'if .scripts.coverage == null then false else true end' package.json)" | tee -a $GITHUB_ENV
          echo "HAVE_VALIDATE_SCRIPT=$(jq 'if .scripts.validate == null then false else true end' package.json)" | tee -a $GITHUB_ENV
          echo "HAVE_LINT_SCRIPT=$(jq 'if .scripts.lint == null then false else true end' package.json)" | tee -a $GITHUB_ENV
          echo "HAVE_UNIT_TEST_SCRIPT=$(jq 'if .scripts.test == null then false else true end' package.json)"| tee -a $GITHUB_ENV

      - uses: pnpm/action-setup@v4
        if: env.NPM == 'pnpm'

      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://registry.npmjs.org'

      - name: Install Azurite
        id: azuright
        uses: potatoqualitee/azuright@v1.1
        with:
          self-signed-cert: true

      - name: Get current npmjs version for ${{env.PACKAGE_NAME}}
        run: |
          echo "NPM_VERSION=$(curl -s https://registry.npmjs.org/${{ env.PACKAGE_NAME }} | jq -r '."dist-tags".latest')" >> $GITHUB_ENV

      - name: Install dependencies
        run: ${{ env.NPM }} install

      - name: Run validate
        if: env.HAVE_VALIDATE_SCRIPT == 'true'
        run: ${{ env.NPM }} run validate

      - name: Run linter checks
        if: env.HAVE_LINT_SCRIPT == 'true'
        run: ${{ env.NPM }} run lint

      - name: Run unit tests
        if: env.HAVE_UNIT_TEST_SCRIPT == 'true'
        run: ${{ env.NPM }} test

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure() # run this step even if previous step failed
        with:
          name: JEST Tests # Name of the check run which will be created
          path: test-results.xml # Path to test results
          reporter: java-junit # Format of test results

      - name: Run and publish code coverage
        if: |
          always() &&
          github.ref == env.PUBLISH_BRANCH &&
          env.CC_TEST_REPORTER_ID != '' &&
          env.HAVE_COVERAGE_SCRIPT == 'true'
        uses: paambaati/codeclimate-action@v5.0.0
        env:
          CC_TEST_REPORTER_ID: ${{ env.CC_TEST_REPORTER_ID }}
        with:
          coverageCommand: ${{ env.NPM }} run coverage

      # npm publish when PR done
      - name: Publish ${{env.PACKAGE_NAME}} ${{env.PACKAGE_VERSION}}
        run: ${{ env.NPM }} publish --no-git-checks --access public
        if: |
          github.ref == env.PUBLISH_BRANCH &&
          env.NPM_TOKEN != '' &&
          env.PACKAGE_VERSION != env.NPM_VERSION
        env:
          NODE_AUTH_TOKEN: ${{ env.NPM_TOKEN }}
